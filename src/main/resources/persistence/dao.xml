<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- hikari datasource 配置项 -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="poolName" value="${jdbc.poolName}"/>
                <property name="connectionTestQuery" value="${jdbc.connectionTestQuery}"/>
                <property name="dataSourceClassName" value="${jdbc.dataSourceClassName}"/>
                <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
                <property name="maximumPoolSize" value="${jdbc.maximumPoolSize}"/>
                <!-- 最小空闲线程个数 -->
                <property name="minimumIdle" value="${jdbc.minimumIdle}"/>
                <!-- 自动提交 -->
                <property name="autoCommit" value="${jdbc.autoCommit}"/>
                <!-- 连接只读数据库时配置为true， 保证安全 -->
                <property name="readOnly" value="${jdbc.readOnly}"/>
                <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
                <!-- <property name="connectionTimeout" value="30000" /> -->
                <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
                <!-- <property name="idleTimeout" value="600000" /> -->
                <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
                    wait_timeout参数（show variables like '%timeout%';） -->
                <property name="maxLifetime" value="${jdbc.maxLifetime}"/>

                <!-- 不使用老式的jdbc driver class，而使用datasource配置 -->
                <property name="dataSourceProperties">
                    <props>
                        <prop key="url">${jdbc.url}</prop>
                        <prop key="user">${jdbc.username}</prop>
                        <prop key="password">${jdbc.password}</prop>
                        <!-- enable prepared statements Cache -->
                        <prop key="cachePrepStmts">${jdbc.cachePrepStmts}</prop>
                        <!-- sets the number of prepared statements that the MySQL driver will
                            cache per connection -->
                        <prop key="prepStmtCacheSize">${jdbc.prepStmtCacheSize}</prop>
                        <!-- the maximum length of a prepared SQL statement that the driver will
                            cache -->
                        <prop key="prepStmtCacheSqlLimit">${jdbc.prepStmtCacheSqlLimit}</prop>
                    </props>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <!--配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:persistence/mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个用;隔开-->
        <property name="typeAliasesPackage"
                  value="com.lsq.jersey.dao.po"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations">
            <array>
                <value>classpath*:sql/*.xml</value>
            </array>
        </property>
    </bean>

    <!--配置扫描Dao接口包,动态实现DAO接口,注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口,多个用,隔开-->
        <property name="basePackage" value="com.lsq.jersey.dao"/>
    </bean>


</beans>